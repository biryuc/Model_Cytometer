from scipy.integrate import quad

F_c = 19773 # Частота излома Hertz примерно по графику
#Спектральная плотность nV(Hz)**1/2 для каждого прямоугольника в первом канале (из LTspice)
ND_first_channel = [219.6702,216.84608,204.292005,188.03939,171.0482,153.92293,136.74497,120.98939,106.69478,94.397072,50.058486,20.718595,11.096967,7.0068686,4.9074425,3.103116]
#Спектральная плотность nV(Hz)**1/2 для каждого прямоугольника во втором канале (из LTspice)
ND_second_channel = [11.560174,11.382156,10.861588,10.178365,9.4350137,8.6454757,7.8386801,7.1281109,6.5224762,5.9147179,3.767358,2.1954485,1.5491808,1.2098705,1.0039223,692.33692*1e-3]
# Частотные Границы Hertz прямоугольников интегрирования (из LTspice)
Freq = [0,10*1e+3,20*1e+3,30*1e+3,40*1e+3,50*1e+3,60*1e+3,70*1e+3,80*1e+3,90*1e+3,1e+5,2*1e+5,3*1e+5,4*1e+5,5*1e+5,6*1e+5,3*1e+6]
V_total_first_channel=0
V_total_second_channel=0

#Само итегрирование
def Vn(F_l,F_h,i,X):
    func = lambda f: pow(X[i]*1e-9*pow((F_c/f) + 1,0.5),2)
    res,err = quad(func, F_l, F_h)
    return pow(res,0.5)

# Суммирование по каждому прямоугольнику интегрирования для первого канала
for k in range(len(ND_first_channel)):
    V_total_first_channel += Vn(Freq[k],Freq[k+1],k,ND_first_channel)
# Суммирование по каждому прямоугольнику интегрирования для второго канала
for k in range(len(ND_second_channel)):
    V_total_second_channel += Vn(Freq[k],Freq[k+1],k,ND_second_channel)

print("Первый канал V_n = ",V_total_first_channel,"[V_rms]")
print("Второй канал V_n = ",V_total_second_channel,"[V_rms]")

print('Разрешение двоичного АЦП по напряжению = ', 20/(2**13), '[V]')

print('Реальный динамический диапазон первый канал = ', 20/(3*V_total_first_channel))
print('Реальный динамический диапазон второй канал = ', 20/(3*V_total_second_channel))
